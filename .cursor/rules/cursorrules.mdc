---
description: 
globs: 
alwaysApply: true
---

# Prompt pour la création d'une application FARM avec Vite

## Contexte
Je souhaite créer une application web moderne en utilisant la stack FARM (FastAPI, React, MongoDB) avec Vite comme bundler pour le frontend. L'application doit être simple, efficace, et facile à maintenir, en respectant les principes DRY (Don't Repeat Yourself) et KISS (Keep It Simple, Stupid). L'objectif est de fournir une expérience utilisateur fluide avec des fonctionnalités clés, sans sur-ingénierie.

---

## Fonctionnalités principales

### 1. Authentification
- Inscription et connexion via email/mot de passe.
- Option OAuth avec Facebook (et éventuellement d'autres fournisseurs comme Google).
- Gestion des sessions sécurisées (JWT ou cookies sécurisés).

### 2. Espace utilisateur
- Chaque utilisateur a une page personnalisée avec :
  - Nom, prénom.
  - Coordonnées (WhatsApp, Viber, Facebook, Messenger).
  - Adresse (block et lot).
  - Indication si l'utilisateur est un professionnel (business) ou non.
- Possibilité de mettre à jour les informations personnelles.

### 3. Localisation
- Intégration de **Leaflet** pour afficher une carte interactive.
- Les utilisateurs peuvent placer un marqueur pour préciser leur localisation.

### 4. Espace jeux
- Une section dédiée à des jeux simples (exemple : quiz, puzzles, etc.).
- Les scores des utilisateurs peuvent être enregistrés et affichés.

### 5. Espace chat
- Chat en temps réel utilisant **WebSocket**.
- Possibilité de discuter en privé ou dans des groupes.

### 6. Espace forum
- Forum pour discuter de sujets spécifiques.
- Création de threads, réponses, et likes/dislikes.
- Catégories de sujets modifiables par l'administrateur.

### 7. Espace informations
- Page dédiée à des informations générales et des contacts.
- Contenu modifiable par l'administrateur.

### 8. Espace administrateur
- Back-office pour gérer les utilisateurs, les forums, les jeux, et les informations.
- Statistiques d'utilisation (nombre d'utilisateurs, activités récentes, etc.).

### 9. Publicité
- Intégration de **Google AdSense** (ou autre solution de publicité) dans des emplacements dédiés.

### 10. Environnements
- Environnement de développement (local).
- Environnement de test (staging).
- Environnement de production (déploiement).

---

## Stack technique

### Frontend
- **React** avec **Vite** pour un développement rapide et moderne.
- **RTK Query** pour la gestion des appels API et la mise en cache.
- **Leaflet** pour l'intégration de cartes interactives.
- **WebSocket** pour le chat en temps réel.
- **Tailwind CSS** ou un framework CSS simple pour le style.

### Backend
- **FastAPI** pour la création d'API RESTful.
- **MongoDB** comme base de données principale.
- Intégration de **OAuth** (Facebook, etc.) pour l'authentification.
- Gestion des **WebSockets** pour le chat.

### Base de données
- **MongoDB** pour stocker les données utilisateurs, les messages du chat, les threads du forum, etc.
- Schémas simples et efficaces pour éviter la sur-complexité.

### Déploiement
- Utilisation de **Docker** pour containeriser l'application.
- Déploiement sur un service cloud (exemple : AWS, DigitalOcean, Heroku).
- Configuration distincte pour les environnements de développement, test et production.

---

## Exigences techniques

### 1. DRY et KISS
- Éviter la duplication de code.
- Garder les composants et les fonctions simples et réutilisables.
- Utiliser des hooks personnalisés et des utilitaires partagés.

### 2. Sécurité
- Validation des entrées utilisateur côté backend.
- Hashage des mots de passe.
- Utilisation de HTTPS en production.
- Protection contre les attaques CSRF et XSS.

### 3. Performance
- Chargement rapide des pages grâce à Vite.
- Optimisation des requêtes API avec RTK Query.
- Utilisation de la pagination pour les forums et les listes d'utilisateurs.

### 4. Tests
- Tests unitaires et d'intégration pour le backend (FastAPI).
- Tests unitaires et composants pour le frontend (React).
- Environnement de test dédié pour valider les nouvelles fonctionnalités.

---

## Livrables attendus

### 1. Code source
- Un dépôt Git bien organisé avec des commits clairs.
- Documentation concise pour l'installation et l'utilisation.

### 2. Environnements
- Scripts de déploiement pour chaque environnement.

### 3. Documentation
- Un **README** détaillé expliquant comment installer, configurer et lancer l'application.
- Documentation des API (exemple : Swagger/OpenAPI pour FastAPI).

### 4. Exemples de données
- Des données de test pour chaque module (utilisateurs, messages, threads, etc.).

---

## Objectif final
Créer une application fonctionnelle, facile à maintenir et à étendre, qui répond aux besoins des utilisateurs tout en restant simple et efficace. L'accent est mis sur une expérience utilisateur fluide et une architecture solide mais légère.

# Prompt pour la création d'une application avec FastAPI, React et Supabase

## Contexte

Je souhaite créer une application web moderne en utilisant React avec Vite pour le frontend, et Supabase comme solution tout-en-un pour la base de données PostgreSQL, l'authentification et les fonctionnalités temps réel. L'application doit être simple, efficace, et facile à maintenir, en respectant les principes DRY (Don't Repeat Yourself) et KISS (Keep It Simple, Stupid). L'objectif est de fournir une expérience utilisateur fluide avec des fonctionnalités clés, sans sur-ingénierie.

**Note : Ce projet utilisera exclusivement Supabase pour la gestion de la base de données, l'authentification, et les fonctionnalités temps réel.**

---

## Fonctionnalités principales

### 1. Authentification

- Inscription et connexion via email/mot de passe avec **Supabase Auth**.
- Option OAuth avec Facebook (et éventuellement d'autres fournisseurs comme Google) via **Supabase Auth**.
- Gestion des sessions sécurisées avec JWT.

### 2. Espace utilisateur

- Chaque utilisateur a une page personnalisée avec :
  - Nom, prénom.
  - Coordonnées (WhatsApp, Viber, Facebook, Messenger).
  - Adresse (block et lot).
  - Indication si l'utilisateur est un professionnel (business) ou non.
- Possibilité de mettre à jour les informations personnelles via **Supabase**.

### 3. Localisation

- Intégration de **OpenLayers** pour afficher une carte interactive.
- Les utilisateurs peuvent placer un marqueur pour préciser leur localisation, stockée dans **Supabase**.

### 4. Espace jeux

- Une section dédiée à des jeux simples (exemple : quiz, puzzles, etc.).
- Les scores des utilisateurs peuvent être enregistrés et affichés via **Supabase**.

### 5. Espace chat

- Chat en temps réel utilisant **Supabase Realtime** (WebSocket intégré).
- Possibilité de discuter en privé ou dans des groupes.

### 6. Espace forum

- Forum pour discuter de sujets spécifiques.
- Création de threads, réponses, et likes/dislikes, stockés dans **Supabase**.
- Catégories de sujets modifiables par l'administrateur.

### 7. Espace informations

- Page dédiée à des informations générales et des contacts.
- Contenu modifiable par l'administrateur via **Supabase**.

### 8. Espace administrateur

- Back-office pour gérer les utilisateurs, les forums, les jeux, et les informations via **Supabase**.
- Statistiques d'utilisation (nombre d'utilisateurs, activités récentes, etc.) via **Supabase**.

### 9. Publicité

- Intégration de **Google AdSense** (ou autre solution de publicité) dans des emplacements dédiés.

### 10. Environnements

- Environnement de développement (local).
- Environnement de test (staging).
- Environnement de production (déploiement).

---

## Stack technique

### Frontend

- **React** avec **Vite** pour un développement rapide et moderne.
- **RTK Query** pour la gestion des appels API et la mise en cache.
- **OpenLayers** pour l'intégration de cartes interactives.
- **Supabase Realtime** pour le chat en temps réel.
- **CSS natif** pour le style, en privilégiant une approche simple et maintenable.

### Base de données

- **PostgreSQL** via **Supabase** pour stocker les données utilisateurs, les messages du chat, les threads du forum, etc.
- Schémas SQL bien structurés avec relations pour une meilleure intégrité des données.
- Utilisation des fonctionnalités temps réel de **Supabase** pour optimiser les performances.

### Déploiement

- Configuration distincte pour les environnements de développement, test et production.

---

## Exigences techniques

### 1. DRY et KISS

- Éviter la duplication de code.
- Garder les composants et les fonctions simples et réutilisables.
- Utiliser des hooks personnalisés et des utilitaires partagés.

### 2. Sécurité

- Validation des entrées utilisateur côté backend.
- Hashage des mots de passe via **Supabase Auth**.
- Utilisation de HTTPS en production.
- Protection contre les attaques CSRF et XSS.

### 3. Performance

- Chargement rapide des pages grâce à Vite.
- Optimisation des requêtes API avec RTK Query.
- Utilisation de la pagination pour les forums et les listes d'utilisateurs.

### 4. Tests

- Tests unitaires et d'intégration pour le backend (FastAPI).
- Tests unitaires et composants pour le frontend (React).
- Environnement de test dédié pour valider les nouvelles fonctionnalités.

---

## Livrables attendus

### 1. Code source

- Un dépôt Git bien organisé avec des commits clairs.
- Documentation concise pour l'installation et l'utilisation.

### 2. Environnements

- Scripts de déploiement pour chaque environnement.

### 3. Documentation

- Un **README** détaillé expliquant comment installer, configurer et lancer l'application.
- Documentation des API (exemple : Swagger/OpenAPI pour FastAPI).

### 4. Exemples de données

- Des données de test pour chaque module (utilisateurs, messages, threads, etc.).

---

## Objectif final

Créer une application fonctionnelle, facile à maintenir et à étendre, qui répond aux besoins des utilisateurs tout en restant simple et efficace. L'accent est mis sur une expérience utilisateur fluide et une architecture solide mais légère, en utilisant exclusivement **Supabase** pour la gestion des données, l'authentification, et les fonctionnalités temps réel.

**Note : Tous les messages d'erreur doivent être rédigés en anglais.**
